[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "osm2geojson"
version = "0.2.9"
description = "Parse OSM and Overpass JSON"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Parfeniuk Mykola", email = "mikola.parfenyuck@gmail.com"}
]
keywords = ["geometry", "gis", "osm", "parsing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: GIS",
]
requires-python = ">=3.8"
dependencies = [
    "shapely>=2.0.0",
    "requests>=2.25.0",
]

[project.urls]
Homepage = "https://github.com/aspectumapp/osm2geojson"
Repository = "https://github.com/aspectumapp/osm2geojson"
Issues = "https://github.com/aspectumapp/osm2geojson/issues"

[project.scripts]
osm2geojson = "osm2geojson.__main__:main"

[tool.setuptools]
packages = ["osm2geojson"]

[tool.setuptools.package-data]
osm2geojson = ["*.json"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
  | id-area-keys
  | osm-polygon-features
)/
'''

# Ruff configuration (modern, fast linter - replaces flake8, isort, etc.)
[tool.ruff]
line-length = 100
target-version = "py38"

# Exclude a variety of commonly ignored directories
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "id-area-keys",
    "osm-polygon-features",
]

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and more
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "T10",    # flake8-debugger
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    # "PTH",  # flake8-use-pathlib (too strict for this project)
    "ERA",    # eradicate (commented-out code)
    # "PL",   # Pylint (too strict for now)
    "TRY",    # tryceratops
    "RUF",    # Ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "TRY002",  # Allow generic Exception (common in this codebase)
    "TRY003",  # Long exception messages
    "TRY300",  # Consider else block
    "B008",    # Function call in argument defaults
    "B904",    # Exception chaining (would require refactoring)
    "B007",    # Unused loop variable
    "SIM108",  # Ternary operator (sometimes less readable)
    "SIM115",  # Context manager (not always needed)
    "SIM102",  # Nested if (sometimes clearer)
    "UP031",   # Printf style formatting (legacy code)
    "ERA001",  # Commented code (sometimes useful)
    "ICN001",  # Import conventions (project style)
    "RUF013",  # Implicit Optional (PEP 484 lenient mode)
    "RUF059",  # Unused unpacked variables (common pattern)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["PT009", "PT027", "B017", "ARG", "SIM", "PLR2004"]  # Allow unittest style + test patterns

[tool.ruff.lint.isort]
known-first-party = ["osm2geojson"]
force-single-line = false
lines-after-imports = 2

# Mypy configuration (lenient for gradual typing)
[tool.mypy]
python_version = "3.9"  # Minimum for mypy
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false  # Too strict for now
no_implicit_optional = false  # Allow implicit Optional
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_return_any = false
strict_equality = false
ignore_errors = true  # Lenient mode - warnings only

[[tool.mypy.overrides]]
module = [
    "shapely.*",
    "requests.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py", "tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["osm2geojson"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
